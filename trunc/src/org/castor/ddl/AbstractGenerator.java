/*
 * Copyright 2006 Le Duc Bao
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package org.castor.ddl;

import java.io.IOException;
import java.io.PrintStream;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Vector;

import org.castor.ddl.schemaobject.Field;
import org.castor.ddl.schemaobject.ForeignKey;
import org.castor.ddl.schemaobject.KeyGenerator;
import org.castor.ddl.schemaobject.PrimaryKey;
import org.castor.ddl.schemaobject.Schema;
import org.castor.ddl.schemaobject.Table;
import org.castor.ddl.typeinfo.TypeInfo;
import org.exolab.castor.mapping.Mapping;
import org.exolab.castor.mapping.MappingException;
import org.exolab.castor.mapping.xml.ClassChoice;
import org.exolab.castor.mapping.xml.ClassMapping;
import org.exolab.castor.mapping.xml.FieldMapping;
import org.exolab.castor.mapping.xml.KeyGeneratorDef;
import org.exolab.castor.mapping.xml.MapTo;
import org.exolab.castor.mapping.xml.MappingRoot;
import org.exolab.castor.mapping.xml.Sql;

/**
 * AbstractGenerator is the base class for various DDL generator of specific DB and
 * handles following tasks: 
 * <li/> Extract information from Mapping to Schema
 * <li/> Loop through the schema and provide a skeleton for DDL creation
 * 
 * <p/>AbstractGenerator will automatically extract necessary information for DDL 
 * creation. That information is handled by Schema.
 * <p/>To create new generator for a DBMS, you should:
 * <li/> Overwrite this class to create new generator for a DBMS. 
 * <li/> If the syntax of DBMS is different to standard DDL syntax, you should 
 * overwrite SchemaObject (Table, Field, KeyGenerator, Index, ForeignKey,...) classes. 
 * The class SchemaObjectFactory who handles the SchemaObject creation must 
 * be overwritten.
 * <li/> You must overwrite the TypeMapper if mapping between JDBC types and 
 * specific DBMS’s types is different among various DBMS.
 * <p/>The example bellow shows how to create a generator for DB2:
 * <li/> <b>Generator for DB2</b>
 * <pre>
 *public class Db2Generator extends AbstractGenerator {
 *
 *    public Db2Generator(final String globConf, final String dbConf)
 *            throws GeneratorException {
 *        super(globConf, dbConf);
 *        setTypeMapper(new Db2TypeMapper(getConf()));
 *    }
 *}   
 * </pre>
 * <li/><b>TypeMapper for DB2</b>
 * <pre>
 *public final class Db2TypeMapper extends AbstractTypeMapper {
 *    public Db2TypeMapper(final Configuration conf) {
 *        super(conf);
 *    }
 * 
 *    protected void initialize(final Configuration conf) {
 *        // numeric types
 *        this.add(new NotSupportedType("bit"));
 *        LOG.warn("Db2 does not support 'TINY' type, use SMALLINT instead.");
 *        this.add(new NoParamType("tinyint", "SMALLINT"));
 *        this.add(new NoParamType("smallint", "SMALLINT"));
 *        this.add(new NoParamType("integer", "INTEGER"));
 *        this.add(new NoParamType("bigint", "BIGINT"));
 *    }
 *}
 *</pre>
 * <li/><b>Field for DB2</b>
 *<pre> 
 *public class Db2Field extends Field {
 *    public Db2Field() {
 *        super();
 *    }
 *
 *    public String toDDL() throws GeneratorException {
 *        StringBuffer buff = new StringBuffer();
 *        buff.append(getName()).append(" ");
 *        buff.append(getType().toDDL(this));
 *        
 *        if (isIdentity()) {
 *            buff.append(" NOT NULL");
 *        }
 *        
 *        KeyGenerator keyGen = getKeyGenerator();
 *        if (keyGen != null && isIdentity()) {
 *            
 *            if (KeyGenerator.IDENTITY_KEY.equalsIgnoreCase(keyGen.getName())) {
 *                buff.append(" GENERATED BY DEFAULT AS IDENTITY ").
 *                    append("START WITH 1 INCREMENT BY 1");
 *            }
 *        }
 *
 *        return buff.toString();
 *    }
 *}
 *</pre>
 * <li/><b>Field for DB2</b>
 *<pre> 
 *public class Db2SchemaFactory extends SchemaFactory {
 *    public Db2SchemaFactory() {
 *        super();
 *    }
 *    public Field createField() {
 *        return new Db2Field();
 *    }
 *
 *}
 *</pre>
 * The GeneratorFactory class handles the specific database generator creation. 
 * For example:
 * <pre>
 *  Generator generator = GeneratorFactory.
 *      createDDLGenerator(“mysql”, “ddl.properties”, “mysql.properties”);
 * </pre>
 *  
 * And to generate DDL, it should specify the printer and call generateDDL method.
 * <pre>
 *  generator.setPrinter(System.out);
 *  Mapping mapping = new Mapping();
 *  mapping.loadMapping("mapping.xml");
 *  generator.generateDDL(mapping);            
 * </pre>
 * 
 * @author <a href="mailto:leducbao@gmail.com">Le Duc Bao</a>
 * @version $Revision: 5951 $ $Date: 2006-04-25 16:09:10 -0600 (Tue, 25 Apr 2006) $
 */
public abstract class AbstractGenerator implements Generator {
    //--------------------------------------------------------------------------

    /** handle all configurations (key, value) */
    private final Configuration _configuration;

    /** handle the key gen registry*/
    private KeyGeneratorRegistry _keyGenRegistry;

    /** handle the MappingHelper */
    private MappingHelper _mappingHelper;

    /** handle the typemapper */
    private TypeMapper _typeMapper;

    /** handle schema factory */
    private SchemaFactory _schemaFactory;

    /** handle the _mapping document */
    private Mapping _mapping;

    /** schema */
    private Schema _schema;

    /** handle all resolving tables */
    private final Map _resolveTable = new HashMap();

    /** handle the writer for output */
    private PrintStream _printer;

    //--------------------------------------------------------------------------

    /**
     * Constructor for AbstractGenerator.
     * 
     * @param configuration Configuration to use by the generator.
     */
    protected AbstractGenerator(final Configuration configuration) {
        _configuration = configuration;
    }
    
    //--------------------------------------------------------------------------

    /**
     * @return Returns configuration of generator.
     */
    public final Configuration getConfiguration() {
        return _configuration;
    }

    /**
     * Set the keyGenRegistry by keyGenRegistry.
     * @param keyGenRegistry  keygen registry
     */
    public final void setKeyGenRegistry(final KeyGeneratorRegistry keyGenRegistry) {
        _keyGenRegistry = keyGenRegistry;
    }

    /**
     * Set the mappingHelper by _mappingHelper.
     * 
     * @param mappingHelper mapping helper
     */
    protected final void setMappingHelper(final MappingHelper mappingHelper) {
        _mappingHelper = mappingHelper;
    }

    /**
     * @return Returns the mappingHelper.
     */
    public final MappingHelper getMappingHelper() {
        return _mappingHelper;
    }

    /**
     * Set the typeMapper by _typeMapper.
     * 
     * @param typeMapper type mapper
     */
    public final void setTypeMapper(final TypeMapper typeMapper) {
        _typeMapper = typeMapper;
        _mappingHelper.setTypeMapper(_typeMapper);
    }

    /**
     * @return Returns the typeMapper.
     */
    public final TypeMapper getTypeMapper() {
        return _typeMapper;
    }

    /**
     * Set the schemaFactory by _schemaFactory.
     * 
     * @param schemaFactory schema factory
     */
    protected final void setSchemaFactory(final SchemaFactory schemaFactory) {
        _schemaFactory = schemaFactory;
    }

    /**
     * @return Returns the schemaFactory.
     */
    public final SchemaFactory getSchemaFactory() {
        return _schemaFactory;
    }

    /**
     * @param mapping The mapping to set.
     */
    public final void setMapping(final Mapping mapping) {
        _mapping = mapping;
        _mappingHelper.setMapping(_mapping);
    }

    /**
     * @return Returns the _mapping.
     */
    public final Mapping getMapping() {
        return _mapping;
    }

    /**
     * @return Returns the schema.
     */
    public final Schema getSchema() {
        return _schema;
    }

    //--------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    public final void generateDDL(final String mappingFile)
            throws GeneratorException, IOException, MappingException {
        _mapping = new Mapping();
        _mapping.loadMapping(mappingFile);

        _mappingHelper.setMapping(_mapping);
        _mappingHelper.setTypeMapper(_typeMapper);

        //create schema
        createSchema();
        //generate DDL
        generateDDL();
    }

    /**
     * {@inheritDoc}
     */
    public final void generateDDL(final Mapping mappingDoc) throws GeneratorException {
        _mapping = mappingDoc;
        _mappingHelper.setMapping(mappingDoc);
        _mappingHelper.setTypeMapper(_typeMapper);

        //create schema
        createSchema();
        //generate ddl
        generateDDL();
    }

    /**
     * @throws GeneratorException
     *             generator exception
     */
    private void generateDDL() throws GeneratorException {
        String groupBy = _configuration.getStringValue(
                BaseConfiguration.GROUP_DDL_BY_KEY,
                BaseConfiguration.GROUP_DDL_BY_TABLE);
        if (BaseConfiguration.GROUP_DDL_BY_TABLE.equalsIgnoreCase(groupBy)) {
            generateDDLGroupByTable();
        } else if (BaseConfiguration.GROUP_DDL_BY_DDLTYPE.equalsIgnoreCase(groupBy)) {
            generateDDLGroupByDDLType();
        } else {
            throw new GeneratorException("group ddl by do not support: " + groupBy);
        }
    }

    /**
     * generating ddl grouped by ddl type of DDL (e.g DROP, CREATE TABLE, create 
     * Primary key, create foreign key)
     * 
     * @throws GeneratorException
     *             generator exception
     */
    private void generateDDLGroupByDDLType() throws GeneratorException {
        boolean genSchema = _configuration.getBoolValue(
                BaseConfiguration.GENERATE_DDL_FOR_SCHEMA_KEY, true);
        boolean genDrop = _configuration.getBoolValue(
                BaseConfiguration.GENERATE_DDL_FOR_DROP_KEY, true);
        boolean genCreate = _configuration.getBoolValue(
                BaseConfiguration.GENERATE_DDL_FOR_CREATE_KEY, true);
        boolean genPrimaryKey = _configuration.getBoolValue(
                BaseConfiguration.GENERATE_DDL_FOR_PRIMARYKEY_KEY, true);
        boolean genForeignKey = _configuration.getBoolValue(
                BaseConfiguration.GENERATE_DDL_FOR_FOREIRNKEY_KEY, true);
        boolean genIndex = _configuration.getBoolValue(
                BaseConfiguration.GENERATE_DDL_FOR_INDEX_KEY, true);
        boolean genKeyGen = _configuration.getBoolValue(
                BaseConfiguration.GENERATE_DDL_FOR_KEYGENERATOR_KEY, true);

        write(generateHeader());
        
        //generate ddl for schema
        if (genSchema) {
            write(_schema.toDDL());
        }

        //generate drop statemetn
        if (genDrop) {
            write(generateDrop());
        }

        //generate create statement
        if (genCreate) {
            write(generateCreate());
        }

        //generate primary key creation statement
        if (genPrimaryKey) {
            write(generatePrimaryKey());
        }

        //generate foreign key creation statement
        if (genForeignKey) {
            write(generateForeignKey());
        }

        //generate index creation statement
        if (genIndex) {
            write(generateIndex());
        }

        if (genKeyGen) {
            write(generateKeyGenerator());
        }
    }

    /**
     * generating ddl group by table
     * @throws GeneratorException
     *             generator exception
     */
    private void generateDDLGroupByTable() throws GeneratorException {
        Vector tables = _schema.getTables();

        boolean genSchema = _configuration.getBoolValue(
                BaseConfiguration.GENERATE_DDL_FOR_SCHEMA_KEY, true);
        boolean genDrop = _configuration.getBoolValue(
                BaseConfiguration.GENERATE_DDL_FOR_DROP_KEY, true);
        boolean genCreate = _configuration.getBoolValue(
                BaseConfiguration.GENERATE_DDL_FOR_CREATE_KEY, true);
        boolean genPrimaryKey = _configuration.getBoolValue(
                BaseConfiguration.GENERATE_DDL_FOR_PRIMARYKEY_KEY, true);
        boolean genForeignKey = _configuration.getBoolValue(
                BaseConfiguration.GENERATE_DDL_FOR_FOREIRNKEY_KEY, true);
        boolean genIndex = _configuration.getBoolValue(
                BaseConfiguration.GENERATE_DDL_FOR_INDEX_KEY, true);
        boolean genKeyGen = _configuration.getBoolValue(
                BaseConfiguration.GENERATE_DDL_FOR_KEYGENERATOR_KEY, true);

        write(generateHeader());
        
        if (genSchema) {
            write(_schema.toDDL());
        }
        
        
        for (Iterator i = tables.iterator(); i.hasNext();) {
            StringBuffer buff = new StringBuffer();
            Table table = (Table) i.next();

            // drop
            if (genDrop) {
                buff.append(table.toDropDDL());
            }

            // create
            if (genCreate) {
                buff.append(table.toCreateDDL());
            }

            // primary key
            if (genPrimaryKey) {
                buff.append(table.getPrimaryKey().toCreateDdl());
            }

            // foreign key
            if (genForeignKey) {
                buff.append(createForeignKeyDDL(table));
            }

            // index
            if (genIndex) {
                buff.append(createIndexDDL(table));
            }

            // KeyGenerator
            if (genKeyGen) {
                buff.append(table.toKeyGeneratorDDL());
            }

            write(buff.toString());
        }

    }

    /**
     * generate primany key creation, delegate to table.toPrimaryKeyDDL()
     * @return primary key creation ddl
     */
    public String generatePrimaryKey() {
        Vector tables = _schema.getTables();
        StringBuffer buff = new StringBuffer();
        for (Iterator i = tables.iterator(); i.hasNext();) {
            Table table = (Table) i.next();
            buff.append(table.getPrimaryKey().toCreateDdl());
        }
        return buff.toString();
    }

    /**
     * generate sequence/trigger ddl, delegate to SequenceKey.toDDL() 
     * @return key generator creation ddl
     * @throws GeneratorException exception
     */
    public String generateKeyGenerator() throws GeneratorException {
        Vector tables = _schema.getTables();
        StringBuffer buff = new StringBuffer();

        for (Iterator i = tables.iterator(); i.hasNext();) {
            Table table = (Table) i.next();
            if (table.getKeyGenerator() != null) {
                buff.append(table.toKeyGeneratorDDL());
            }
        }
        return buff.toString();

    }

    /**
     * generate ddl for index creation
     * @return index creation ddl
     */
    public String generateIndex() {
        Vector tables = _schema.getTables();
        StringBuffer buff = new StringBuffer();

        for (Iterator i = tables.iterator(); i.hasNext();) {
            Table table = (Table) i.next();
            buff.append(createIndexDDL(table));
        }
        return buff.toString();
    }

    /** generate ddl for drop statement
     * @return drop creation ddl
     */
    public String generateDrop() {
        Vector tables = _schema.getTables();
        StringBuffer buff = new StringBuffer();

        for (Iterator i = tables.iterator(); i.hasNext();) {
            Table table = (Table) i.next();
            buff.append(table.toDropDDL());
        }
        return buff.toString();
    }

    /**
     * generate header comment, print out the header_comment_text definition 
     * in the ddl.properties
     * @return header comment
     */
    public String generateHeader() {
       return ""; 
    }

    /**
     * generate create statement, delegate to table.toCreateDDL() 
     * <pre>
     * CREATE TABLE prod (
     *  id INTEGER NOT NULL,
     *  name CHAR(16)
     * );

     * CREATE TABLE prod_detail (
     *  id INTEGER NOT NULL,
     *  prod_id CHAR(16)
     * );
     * </pre>
     * @return create table ddl
     * @throws GeneratorException
     *             generator exception
     */
    public String generateCreate() throws GeneratorException {
        Vector tables = _schema.getTables();
        StringBuffer buff = new StringBuffer();

        for (Iterator i = tables.iterator(); i.hasNext();) {
            Table table = (Table) i.next();
            buff.append(table.toCreateDDL());
        }
        return buff.toString();
    }

    /**
     * generate constrains statement
     * 
     * <pre>
     * Example:
     *   ALTER TABLE `prod_group` ADD CONSTRAINT `FK_prod_group_1` 
     *   FOREIGN KEY `FK_prod_group_1` (`id`, `name`)
     *    REFERENCES `category` (`id`, `name`)
     *    ON DELETE SET NULL
     *    ON UPDATE CASCADE;
     * </pre>
     * 
     * @return foreign key creation ddl
     */
    public final String generateForeignKey() {
        Vector tables = _schema.getTables();
        StringBuffer buff = new StringBuffer();

        for (Iterator i = tables.iterator(); i.hasNext();) {
            Table table = (Table) i.next();
            buff.append(createForeignKeyDDL(table));
        }
        return buff.toString();
    }

    /**
     * set Writer
     * 
     * @param printer
     *            printer
     */
    public final void setPrinter(final PrintStream printer) {
        this._printer = printer;
    }

    /**
     * 
     * @return Returns the writer.
     */
    public final java.io.PrintStream getPrinter() {
        return _printer;
    }

    /**
     * Extracting informations from mapping to schema, this is done by 3 steps
     * <li/>Extracting KeyGeneratorDef
     * <li/>Extracting Table, the additional for many-many relationship will be added
     * to the _resolveTable
     * <li/>Extracting additional tables for many-many relationship
     * 
     * @throws GeneratorException
     *             generator exception
     */
    public final void createSchema() throws GeneratorException {
        // _schema
        MappingRoot root = _mapping.getRoot();
        _schema = _schemaFactory.createSchema();
        _schema.setConfiguration(_configuration);

        // generate key generator definition
        Enumeration ekg = root.enumerateKeyGeneratorDef();
        while (ekg.hasMoreElements()) {
            KeyGeneratorDef definition = (KeyGeneratorDef) ekg.nextElement();
            _keyGenRegistry.createKeyGenerator(definition);
        }

        //go throught ClassMapping
        Enumeration ec = root.enumerateClassMapping();
        while (ec.hasMoreElements()) {
            ClassMapping cm = (ClassMapping) ec.nextElement();

            Table table = createTable(cm);
            if (table != null) {
                _schema.addTable(table);
            }
        }
        // generate _resolve Table
        Iterator i = _resolveTable.keySet().iterator();
        while (i.hasNext()) {
            ClassMapping cm = (ClassMapping) _resolveTable.get(i.next());
            
            Table table = createTable(cm);
            if (table != null) {
                _schema.addTable(table);
            }
        }
    }

    /**
     * create sql table from a ClassMapping. This function extracts information from 
     * a classmapping.  
     * @param cm
     *            ClassMapping
     * @return table which encapsulates information for creating a table
     * @throws GeneratorException
     *             generator exception
     */
    private Table createTable(final ClassMapping cm) 
        throws GeneratorException {
        String tableName = cm.getMapTo().getTable();
        if (tableName == null) { return null; }

        Table table = _schemaFactory.createTable();
        table.setName(tableName);
        table.setConfiguration(_configuration);
        table.setSchema(_schema);
        
        PrimaryKey primarykey = _schemaFactory.createPrimaryKey();
        primarykey.setConfiguration(_configuration);
        primarykey.setTable(table);
        primarykey.setName("pk_" + tableName);
        table.setPrimaryKey(primarykey);

        // if there are no field in the table
        if (cm.getClassChoice() == null) { return table; }

        boolean isUseFieldIdentity = _mappingHelper.isUseFieldIdentity(cm);
        Enumeration ef = cm.getClassChoice().enumerateFieldMapping();

        // process key-generator
        String keygenerator = cm.getKeyGenerator();
        KeyGenerator keyGen = null;
        if (keygenerator != null) {
            keyGen = _keyGenRegistry.getKeyGenerator(keygenerator.toUpperCase());
        }
        table.setKeyGenerator(keyGen);

        while (ef.hasMoreElements()) {
            FieldMapping fm = (FieldMapping) ef.nextElement();

            // if <sql> tag is not defined, there is no _mapping to DB, skip it
            if (fm.getSql() == null) { continue; }

            // create a field
            boolean isFieldIdentity = fm.getIdentity();
            // if use class' identity, overwrite this one
            if (!isUseFieldIdentity) {
                isFieldIdentity = _mappingHelper.isIdentity(cm, fm);
            }
            
            // checking for many-key, many-table definition
            if (fm.getSql().getManyTable() != null) {
                    // generate resolving table for many-many relationship
                    addResolveField(fm, cm);
            }
                    
            //process column creation if sql name is defined.
            String[] sqlnames = fm.getSql().getName();              
            if (sqlnames != null && sqlnames.length > 0 
                    && fm.getSql().getManyTable() == null) {
                //normal case, using sql name as column name
                String sqltype = fm.getSql().getType();

                TypeInfo typeInfo = null; //type info
                ClassMapping cmRef = null; //reference classmapping
                String[] refIdTypes = null;
                boolean isUseReferenceType = false;

                // type resolving: get type info
                if (sqltype != null) {
                    typeInfo = _typeMapper.getType(sqltype);
                }

                // if typeInfo is null, this table has a reference to another one.
                if (typeInfo == null) {
                    cmRef = _mappingHelper.getClassMappingByName(fm.getType());
                    // if cmRef is null, the reference class is not found
                    //then using field type
                    if (cmRef == null) {                        
                        typeInfo = _typeMapper.getType(fm.getType());
                        
                        if (typeInfo == null) {
                            throw new TypeNotFoundException("can not resolve type "
                                + fm.getType() + " in class '" + cm.getName() + "'");
                        }
                    } else {
                        isUseReferenceType = true;
                        refIdTypes = _mappingHelper.resolveTypeReferenceForIds(fm
                                .getType());

                        // if number of reference table's Id differs to number of
                        // field elements
                        if (refIdTypes.length != sqlnames.length) {
                            throw new TypeNotFoundException(
                                    "number of reference table's Id differs"
                                            + " to number of field elements '"
                                            + fm.getName() + "' of class '" 
                                            + cm.getName() + "'"
                                            + refIdTypes.length + "," + sqlnames.length);
                        }

                        // create foreign key
                        addOneOneForeignKey(table, fm, cm.getMapTo().getTable());
                    }
                }

                // create fields
                for (int i = 0; i < sqlnames.length; i++) {
                    Field field = _schemaFactory.createField();
                    field.setConfiguration(_configuration);

                    // group_moderator mediumint(8) DEFAULT '0' NOT NULL,
                    if (isUseReferenceType) {
                        // each sqlname is correpondent to a identity of the reference 
                        // table. so, it should get the original type of the reference 
                        // field
                        typeInfo = _typeMapper.getType(refIdTypes[i]);
                        if (typeInfo == null) {
                            throw new TypeNotFoundException(
                                    "can not find reference type "
                                    + refIdTypes[i] + " of class " + cm.getName());
                        }
                    }

                    // process attributes of field
                    field.setName(sqlnames[i]);
                    field.setTable(table);
                    field.setType(typeInfo);
                    field.setIdentity(isFieldIdentity);
                    field.setRequired(fm.getRequired());
                    field.setKeyGenerator(keyGen);

                    table.addField(field);
                    
                    if (isFieldIdentity) {
                       primarykey.addPrimaryKeyColumn(sqlnames[i]); 
                    }
                }
            }            
        }
        
        //process extends, if the extends is defined.
        processExtendedClass(table, cm);
        
        return table;
    }

    /**
     * add all identities if cm into table. This method is used to process
     * extends definition in a class mapping.
     * @param table a table
     * @param cm a class mapping
     * @throws GeneratorException throw exception if key-gen is not found.
     */
    private void processExtendedClass(final Table table, 
            final ClassMapping cm) throws GeneratorException {
        Object extendClass = cm.getExtends();
        if (extendClass == null) { return; }
        
        ClassMapping extendCm = (ClassMapping) extendClass;
        String[] childIds = _mappingHelper.getClassMappingSqlIdentity(cm, false);
        
        if (childIds.length != 0) {
            //check consistency
            String[] childTypes = _mappingHelper.resolveTypeReferenceForIds(cm);
            String[] parentTypes = _mappingHelper.resolveTypeReferenceForIds(extendCm);
            
            if (childTypes.length != parentTypes.length) {
                throw new GeneratorException("Cannot resolve type for class '" 
                        + cm.getName() + "' from extend class '" 
                        + extendCm.getName() + "'");
            }
            for (int i = 0; i < childTypes.length; i++) {
                if (!childTypes[i].equalsIgnoreCase(parentTypes[i])) {
                    throw new GeneratorException("Cannot resolve type for class '" 
                            + cm.getName() + "' from extend class '" 
                            + extendCm.getName() + "'");
                }
            }
            return;
        }
        
        boolean isUseFieldIdentity = _mappingHelper.isUseFieldIdentity(extendCm);
        Enumeration extendEf = extendCm.getClassChoice().enumerateFieldMapping();

        // process key-generator
        String keygenerator = extendCm.getKeyGenerator();
        KeyGenerator keyGen = null;
        if (keygenerator != null) {
            keyGen = _keyGenRegistry.getKeyGenerator(keygenerator.toUpperCase());
        }
        table.setKeyGenerator(keyGen);

        while (extendEf.hasMoreElements()) {
            FieldMapping extendFm = (FieldMapping) extendEf.nextElement();

            // if <sql> tag is not defined, there is no _mapping to DB, skip it
            if (extendFm.getSql() == null) {
                continue;
            }

            boolean isFieldIdentity = extendFm.getIdentity();
            // if use class' identity, overwrite this one
            if (!isUseFieldIdentity) {
                isFieldIdentity = _mappingHelper.isIdentity(extendCm, extendFm);
            }
            
            // checking for many-key, many-table definition
            if (isFieldIdentity && extendFm.getSql().getManyKeyCount() <= 0) {
                //column is defiend as normal column in child, but it is id which is
                // inherited from parent.
                if (mergeIfDefInBothClasses(table, cm, extendFm)) { continue; }
                
                String[] sqlnames = extendFm.getSql().getName();
                String sqltype = extendFm.getSql().getType();

                TypeInfo typeInfo = null;
                ClassMapping cmRef = null;
                String[] refIdTypes = null;
                boolean isUseReferenceType = false;
                
                // type resolving: get type info
                if (sqltype != null) {
                    typeInfo = _typeMapper.getType(sqltype);
                }

                // if typeInfo is null, this table has a reference to another
                // one.
                if (typeInfo == null) {
                    cmRef = _mappingHelper.getClassMappingByName(extendFm.getType());
                    // if cmRef is null, the reference class is not found
                    if (cmRef == null) {                        
                        typeInfo = _typeMapper.getType(extendFm.getType());
                        
                        if (typeInfo == null) {
                            throw new TypeNotFoundException("can not resolve type "
                                + extendFm.getType());
                        }
                    } else {
                        isUseReferenceType = true;
                        refIdTypes = _mappingHelper.resolveTypeReferenceForIds(extendFm
                                .getType());

                        // if number of reference table's Id differs to number of
                        // field elements
                        if (refIdTypes.length != sqlnames.length) {
                            throw new TypeNotFoundException(
                                    "number of reference table's Id differs"
                                            + " to number of field elements '"
                                            + extendFm.getName() + "' of class '" 
                                            + extendCm.getName() + "'"
                                            + refIdTypes.length + "," + sqlnames.length);
                        }
                    }
                }

                // create fields
                for (int i = 0; i < sqlnames.length; i++) {
                    Field field = _schemaFactory.createField();
                    field.setConfiguration(_configuration);

                    // group_moderator mediumint(8) DEFAULT '0' NOT NULL,
                    if (isUseReferenceType) {
                        // each sqlname is correpondent to a identity of the
                        // reference table
                        // so, it should get the original type of the reference
                        // field
                        typeInfo = _typeMapper.getType(refIdTypes[i]);
                        if (typeInfo == null) {
                            throw new TypeNotFoundException(
                                    "can not find reference type "
                                            + refIdTypes[i] + " of class "
                                            + extendCm.getName());
                        }
                    }

                    field.setName(sqlnames[i]);
                    field.setTable(table);
                    field.setType(typeInfo);
                    field.setIdentity(isFieldIdentity);                    
                    field.setKeyGenerator(keyGen); // process key-generator
                    
                    if (isFieldIdentity) {
                        table.getPrimaryKey().addPrimaryKeyColumn(sqlnames[i]);
                    }

                    table.addField(field);
                }
            }
        }
        
        //process extends
        if (extendCm.getExtends() != null) {
           processExtendedClass(table, extendCm); 
        }
    }

    /**
     * This function is used merge a table if it is mapped to many class.
     * @param table table
     * @param cm class mapping
     * @param extendFm extend field mapping
     * @return true if column is defiend as normal column in child, but it is id 
     * which is inherited from parent. 
     */
    private boolean mergeIfDefInBothClasses(final Table table, 
            final ClassMapping cm,  final FieldMapping extendFm) {
        Enumeration ef = cm.getClassChoice().enumerateFieldMapping();
        
        while (ef.hasMoreElements()) {
            FieldMapping fm = (FieldMapping) ef.nextElement();
            String fname = fm.getName();
            //if extend field has the same name with one of parent's field
            if (fname != null && fname.equalsIgnoreCase(extendFm.getName())) {
                Field f = _schemaFactory.createField();
                
                if (fm.getSql() == null) { continue; }
                String[] sqlnames = fm.getSql().getName();
                for (int i = 0; i < sqlnames.length; i++) {
                    f.setName(sqlnames[i]);
                    Field fn = table.getField(f);
                    fn.setIdentity(true);
                }
                return true;
            }
        }
        
        return false;
    }

//    /**
//     * add many-many foreign key into a table
//     * @param fm Field Mapping
//     * @param table parent table
//     * @throws GeneratorException generator exception
//     */
//    private void addManyManyForeignKey(final Table table,
//            final FieldMapping fm) throws GeneratorException {
//        ForeignKey fk = _schemaFactory.createForeignKey();
//        fk.setConf(_configuration);
//        String s;
//
//        fk.setTable(table);
//        s = table + "_" + fm.getName();
//        fk.setConstraintName(s);
//        fk.setFkName(s);
//        fk.setFkkeyList(fm.getSql().getName());
//
//        ClassMapping cm = _mappingHelper.getClassMappingByName(fm.getType());
//
//        if (cm == null) {
//            throw new GeneratorException("can not find class " + fm.getType());
//        }
//
//        fk.setReferenceTableName(cm.getMapTo().getTable());
//        fk.setReferenceKeyList(_mappingHelper.getClassMappingSqlIdentity(cm, true));
//
//        fk.setRelationshipType(ForeignKey.MANY_MANY);
//
//        table.addForeignKey(fk);
//    }

//    /**
//     * add 1-many foreign key into a table
//     * @param fm field mapping
//     * @param table table
//     * @param tableName table name
//     * @throws GeneratorException generator exception
//     */
//    private void addOneManyForeignKey(final Table table,
//            final FieldMapping fm, final String tableName)
//            throws GeneratorException {
//        ForeignKey fk = _schemaFactory.createForeignKey();
//        fk.setConf(_configuration);
//        String s;
//
//        ClassMapping cm = _mappingHelper.getClassMappingByName(fm.getType());
//
//        if (cm == null) {
//            throw new GeneratorException("can not find class " + fm.getType());
//        }
//        
//        fk.setTable(table);
//        s = cm.getMapTo().getTable() + "_" + fm.getName();
//        fk.setConstraintName(s);
//        fk.setFkName(s);
//        fk.setFkkeyList(_mappingHelper.getClassMappingSqlIdentity(cm, true));
//
//        fk.setReferenceTableName(tableName);
//        fk.setReferenceKeyList(fm.getSql().getManyKey());
//
//        fk.setRelationshipType(ForeignKey.ONE_MANY);
//        table.addForeignKey(fk);
//    }

    /**
     * add 1-1 foreign key into a table
     * @param table
     *            table
     * @param fm
     *            field mapping
     * @param tableName
     *            table name
     * @throws GeneratorException
     *             generator exception
     */
    private void addOneOneForeignKey(final Table table,
            final FieldMapping fm, final String tableName)
            throws GeneratorException {
        ForeignKey fk = _schemaFactory.createForeignKey();
        fk.setConfiguration(_configuration);
        String s;

        fk.setTable(table);
        s = tableName + "_" + fm.getName();
        fk.setConstraintName(s);
        fk.setFkkeyList(fm.getSql().getName());

        ClassMapping cm = _mappingHelper.getClassMappingByName(fm.getType());

        if (cm == null) {
            throw new GeneratorException("can not find class " + fm.getType());
        }
        
        fk.setReferenceTableName(cm.getMapTo().getTable());
        
        String[] manykeys = fm.getSql().getManyKey();
        if (manykeys != null && manykeys.length > 0) {
            fk.setReferenceKeyList(manykeys);
        } else {
            fk.setReferenceKeyList(_mappingHelper.getClassMappingSqlIdentity(cm, true));
        }

        fk.setRelationshipType(ForeignKey.ONE_ONE);
        table.addForeignKey(fk);
    }

    /**
     * add a column for a resolving table which is required by m-n relationship
     * @param fm
     *            field mapping
     * @param cm class mapping
     */
    private void addResolveField(final FieldMapping fm, final ClassMapping cm) {
        String keyGen = cm.getKeyGenerator();
        ClassMapping resolveCm = null;
        
        // get table, if not existe, create one
        if (_resolveTable.containsKey(fm.getSql().getManyTable())) {
            resolveCm = (ClassMapping) _resolveTable.get(fm.getSql()
                    .getManyTable());
        } else {
            resolveCm = new ClassMapping();
            resolveCm.setName(fm.getSql().getManyTable());
            resolveCm.setKeyGenerator(keyGen);

            MapTo mapto = new MapTo();
            mapto.setTable(fm.getSql().getManyTable());
            resolveCm.setMapTo(mapto);
            _resolveTable.put(fm.getSql().getManyTable(), resolveCm);
        }

        FieldMapping resolveFm = new FieldMapping();
        resolveFm.setIdentity(true);
        resolveFm.setName(cm.getMapTo().getTable());
        resolveFm.setType(cm.getName());

        ClassChoice cc = resolveCm.getClassChoice();
        if (cc == null) {
            cc = new ClassChoice();
            resolveCm.setClassChoice(cc); 
        }
        cc.addFieldMapping(resolveFm);

        Sql sql = new Sql();
        String[] sqlname = fm.getSql().getManyKey();
        if (sqlname == null || sqlname.length == 0) {
            _mappingHelper.getClassMappingSqlIdentity(cm, true);
        }
        sql.setName(sqlname);
        resolveFm.setSql(sql);
    }

    /**
     * generate ddl for foreign key creation of table
     * @param table
     *            table
     * @return foreignkey creation ddl
     */
    protected final String createForeignKeyDDL(final Table table) {
        StringBuffer buff = new StringBuffer();

        for (Iterator i = table.getForeignKey().iterator(); i.hasNext();) {
            ForeignKey fk = (ForeignKey) i.next();
            buff.append(fk.toDDL());
        }

        return buff.toString();
    }

    /**
     * generate ddl for index creation of table
     * @param table
     *            table
     * @return index creation ddl
     */
    protected final String createIndexDDL(final Table table) {
        return table.toIndexDDL();
    }

    /**
     * Formating ddl string before its outputs. Depending the ddl_format_case 
     * property, the ddl string will be formated 
     * @param s
     *            string
     * @return format string base on Configuration._ddlFormatCase
     */
    private String format(final String s) {
        if (_configuration.getDdlFormatCase() == BaseConfiguration.DDL_FORMAT_LOWERCASE) {
            return s.toLowerCase();
        }
        if (_configuration.getDdlFormatCase() == BaseConfiguration.DDL_FORMAT_UPPERCASE) {
            return s.toUpperCase();
        }
        return s;
    }

    /**
     * 
     * @param s
     *            a string to write to _printer
     */
    protected final void write(final String s) {
        _printer.println(format(s));
    }

    //--------------------------------------------------------------------------
}
